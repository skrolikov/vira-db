package db

import (
	"context"
	"database/sql"
	"fmt"
	"sync"
	"time"

	_ "github.com/lib/pq"
	config "github.com/skrolikov/vira-config"
	logger "github.com/skrolikov/vira-logger"
)

var (
	instance *sql.DB
	once     sync.Once
	mu       sync.RWMutex
	logg     *logger.Logger // –ö–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
)

// SetLogger –∑–∞–¥–∞—ë—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–∞ db
func SetLogger(l *logger.Logger) {
	logg = l
}

// DBStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
type DBStats struct {
	MaxOpenConnections int           `json:"max_open"`
	OpenConnections    int           `json:"open"`
	InUse              int           `json:"in_use"`
	Idle               int           `json:"idle"`
	WaitCount          int64         `json:"wait_count"`
	WaitDuration       time.Duration `json:"wait_duration"`
	MaxIdleClosed      int64         `json:"max_idle_closed"`
	MaxLifetimeClosed  int64         `json:"max_lifetime_closed"`
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (singleton)
func Init(ctx context.Context, cfg *config.Config) (*sql.DB, error) {
	var initErr error

	once.Do(func() {
		mu.Lock()
		defer mu.Unlock()

		conn, err := sql.Open("postgres", cfg.DBUrl)
		if err != nil {
			initErr = fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: %w", err)
			if logg != nil {
				logg.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: %v", err)
			}
			return
		}

		conn.SetMaxOpenConns(cfg.DBMaxOpenConns)
		conn.SetMaxIdleConns(cfg.DBMaxIdleConns)
		conn.SetConnMaxLifetime(cfg.DBConnMaxLifetime)
		conn.SetConnMaxIdleTime(cfg.DBConnMaxIdleTime)

		pingCtx, cancel := context.WithTimeout(ctx, 5*time.Second)
		defer cancel()

		if err = conn.PingContext(pingCtx); err != nil {
			_ = conn.Close()
			initErr = fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∏–Ω–≥–æ–≤–∞—Ç—å –ë–î: %w", err)
			if logg != nil {
				logg.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∏–Ω–≥–æ–≤–∞—Ç—å –ë–î: %v", err)
			}
			return
		}

		instance = conn

		if logg != nil {
			logg.Info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
		}

		// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
		go monitorConnection(ctx, 30*time.Second)
	})

	return instance, initErr
}

// Get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
func Get() (*sql.DB, error) {
	mu.RLock()
	defer mu.RUnlock()

	if instance == nil {
		return nil, ErrDBNotInitialized
	}
	return instance, nil
}

// Close –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
func Close() error {
	mu.Lock()
	defer mu.Unlock()

	if instance == nil {
		return nil
	}

	if err := instance.Close(); err != nil {
		if logg != nil {
			logg.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: %v", err)
		}
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: %w", err)
	}

	instance = nil

	if logg != nil {
		logg.Info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
	}

	return nil
}

// Stats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ –ë–î
func Stats() (*DBStats, error) {
	db, err := Get()
	if err != nil {
		return nil, err
	}

	stats := db.Stats()
	return &DBStats{
		MaxOpenConnections: stats.MaxOpenConnections,
		OpenConnections:    stats.OpenConnections,
		InUse:              stats.InUse,
		Idle:               stats.Idle,
		WaitCount:          stats.WaitCount,
		WaitDuration:       stats.WaitDuration,
		MaxIdleClosed:      stats.MaxIdleClosed,
		MaxLifetimeClosed:  stats.MaxLifetimeClosed,
	}, nil
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func HealthCheck(ctx context.Context) error {
	db, err := Get()
	if err != nil {
		return err
	}

	pingCtx, cancel := context.WithTimeout(ctx, 3*time.Second)
	defer cancel()

	if err := db.PingContext(pingCtx); err != nil {
		return fmt.Errorf("%w: %v", ErrDBConnectionLost, err)
	}
	return nil
}

// monitorConnection –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏ –ª–æ–≥–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏
func monitorConnection(ctx context.Context, interval time.Duration) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			if logg != nil {
				logg.Info("üîï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			}
			return
		case <-ticker.C:
			if err := HealthCheck(ctx); err != nil {
				if logg != nil {
					logg.Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î: %v", err)
				}
				// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –∞–ª–µ—Ä—Ç—ã
			} else {
				if logg != nil {
					logg.Debug("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î —É—Å–ø–µ—à–Ω–∞")
				}
			}
		}
	}
}

// WithTransaction –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func WithTransaction(ctx context.Context, fn func(*sql.Tx) error) error {
	db, err := Get()
	if err != nil {
		return err
	}

	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: %w", err)
	}

	defer func() {
		if p := recover(); p != nil {
			_ = tx.Rollback()
			panic(p) // –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–∞–Ω–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
		}
	}()

	if err := fn(tx); err != nil {
		if rbErr := tx.Rollback(); rbErr != nil {
			err = fmt.Errorf("–æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v, –æ—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: %w", err, rbErr)
			return err
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: %w", err)
	}

	return nil
}
